<DOCTYPE markdown>
<meta charset="utf-8" content="text/markdown" lang="en">

# AppVeyor CI Helpers for Perl

This repository contains a complete [AppVeyor CI](https://appveyor.com) configuration and associated helper scripts to simplify Windows-based testing of Perl distributions.

## Rapid setup

1. Add the single supplied [*.appveyor.yml*](https://github.com/rivy/CI.AppVeyor.helpers-perl/blob/stable.APIv1/.appveyor.yml) file to the Perl distribution being tested.
2. Create an AppVeyor project which observes the Perl distribution's repository.

> ###### Optional extra steps
>
> 1. Enable "Skip branches without appveyor.yml" (located within the "General" section of the AppVeyor project settings).
> 2. Enable code coverage reports ...
>    1. Create a project or projects on [CodeCov](https://codecov.io) and/or [Coveralls](https://coveralls.io) which observes the distribution repository.
>    2. Copy the API token value obtained from the observer project(s) into their respective environment variables (`CODECOV_TOKEN` and/or `COVERALLS_TOKEN`) within the AppVeyor project. These environment variables are set within the "Environment" section of the AppVeyor project settings. Note that the API token values are secrets and should be encrypted (by clicking the lock icon next to each value).

## The Details

### [*.appveyor.yml*](https://github.com/rivy/CI.AppVeyor.helpers-perl/blob/stable.APIv1/.appveyor.yml)

*.appveyor.yml* is a single file which, when added into a perl distribution, will add the ability to test and analyze the distribution using AppVeyor CI.

If either *Build.PL* or *Makefile.PL* is present in the distribution main directory, the module will be automatically built prior to testing, using the standard perl build or make idiom. Testing will then be done with the respective usual idiom (either `perl Build test` or `%make% test`), with `prove` as a fall-back for distributions without the traditional build tooling (eg, many `dzil` packages).

Distributions which lack both *Build.PL* and *Makefile.PL*, but can be tested without non-CORE dependencies (eg, some CORE modules), should work "out-of-the-box", using the `prove` fallback method. The DIST_EXTRA_DEPS configuration variable (see below) can be also used to add any required modules for `prove` testing.

Alternate build and test methods are also possible via the use of configuration variables (detailed below).

Notably, there is no direct support for `dzil` building and testing. Support may be added in the future, but the current `dzil` module ecosystem (as of 2018-11) has many dependencies which won't cleanly install on Win32 environments. Until better Win32 support is available for direct `dzil` building and testing, the fallback, `prove`, testing combined with the use of DIST_EXTRA_DEPS (for testing dependencies) can be a workable solution. Alternatively, the `Dist::Zilla::Plugin::MakeMaker` module could be used by authors to generate an ExtUtils::MakeMaker-compatible distribution for storage in its repository.

#### *.appveyor.yml* configuration variables

|||
-|-
CI_HELPER_API_VERSION | API version (the expected/requested helper API version); <br> [ "1" ]
CI_HELPER_BRANCH      | helper script repository branch to use; <br> "" => auto-set, valid alternates are [ "stable" (the default), "canary", BRANCH or TAG ]
CI_HELPER_REPO        | helper script repository to use; <br> "" => auto-set; allows easier use of alternate helper scripts (ie, alternate forks)
COVERAGE              | requested coverage types; <br> "" => no coverage requested; may include [ "CodeCov", "Coveralls" ], space separated, character case is significant
DEVEL_COVER_OPTIONS   | options for `cover`; <br> "" => auto-set, value determined by DIST_TOOLING; quoted whitespace is an empty/neutral setting which also blocks auto-set
DIST_EXTRA_DEPS       | additional required/requested dependencies for building and/or testing (listed as `cpanm`-compatible arguments, eg, `Test::Differences URI~1.000`)
DIST_SUPPRESS_DEPS    | suppress discovery and installation of dependencies, unless otherwise required (by COVERAGE or DIST_EXTRA_DEPS); <br> [ "" == `false`, non-empty == `true` ] <br> `true` can be useful for CORE modules
DIST_TOOLING          | build tooling category; <br> [ "build", "make" ] <br> "" => auto-set based on existence of *Build.PL* and/or *Makefile.PL*
TEST_METHOD           | testing command/method; <br> "" => auto-set based on DIST_TOOLING (`perl Build test`, `%make% test`, or `prove -bl`)
TEST_FILES            | specific test files to use; <br> "" => auto-set to "" for build/make distributions, otherwise "t" or "t xt" depending on AUTHOR_TESTING and/or RELEASE_TESTING and directory existence

These variables have intelligent defaults and can, in general, be left alone as empty strings. Modifications are usually only necessary for special circumstances.

`CI_HELPER_BRANCH` can be used to select between frequent helper updates (eg, "canary"), more stable code (eg, "stable" [the default]), or invariant (using a release TAG). Generally, from most to least stable ... [ "vendoring" (see below) > TAG > stable > canary > BRANCH ]. By definition, code updates and changes to the helper scripts are applied in the inverse order of "stability".

###### *.appveyor.yml* utility variables

|||
-|-
CI_CACHE_DIR    | cache directory (set and constructed, but essentially unused [* see below])
CI_DEBUG        | enable helper script debug output; <br> [ "" == `false`, non-empty == `true` ]
CI_HELPERS      | path of directory containing "helper" scripts
CI_TEMP_DIR     | working directory
CI_SKIP         | skip job actions (without error or warning)
CI_SKIP_TEST    | skip job testing (without error or warning)
OS_unsupported  | signals 'OS unsupported'; skips job actions (with a terminal "OS unsupported" warning)

Note that caching can drop the perl install time by about 10% to 20% (approximately 10 secs). Because this is such a small overall time savings and because the available cache size, at 1GB total across all projects, is too small to hold the multiple perl downloads, caching remains unused.

<a/>ref: <https://www.appveyor.com/docs/build-cache/#cache-size-beta>

### [*.appveyor_bin*](https://github.com/rivy/CI.AppVeyor.helpers-perl/tree/stable.APIv1/.appveyor_bin)

The *.appveyor_bin* directory contains multiple helper scripts to streamline *.appveyor.yml* and to provide workarounds for various build issues (within both the AppVeyor and the Perl build/test processes).

### Code coverage

Code coverage can be enabled by adding the `CODECOV_TOKEN` and/or `COVERALLS_TOKEN` to the environment variables of the AppVeyor project, on the AppVeyor site. These tokens are obtained from their respective sites.

Please note that these are secrets and should be treated as such. Neither of the token values should ever be included in the *.appveyor.yml* file or submitted into the distribution repository.

### Optional distribution files

#### *.appveyor_init.{BAT,PS1}*

The files *.appveyor_init.BAT* and/or *.appveyor_init.PS1* can serve as distribution-specific overrides of the AppVeyor configuration, especially (but not limited to) overriding global environment variables.

It may be included as a hook to allow distributions to maintain a stable code base from this repository (including the *.appveyor.yml* file), but still allow configuration changes (eg, for CORE modules using `set DIST_SUPPRESS_DEPS=1`).

A sample [*.appveyor_init.BAT*](https://github.com/rivy/CI.AppVeyor.helpers-perl/blob/stable.APIv1/eg/.appveyor_init.BAT) file is included in the [*eg* directory](https://github.com/rivy/CI.AppVeyor.helpers-perl/tree/stable.APIv1/eg).

### "vendoring"

This repository can be "vendored" into a distribution by including both the [*.appveyor.yml*](https://github.com/rivy/CI.AppVeyor.helpers-perl/blob/stable.APIv1/.appveyor.yml) configuration file and a copy of the [*.appveyor_bin*](https://github.com/rivy/CI.AppVeyor.helpers-perl/tree/stable.APIv1/.appveyor_bin) directory at the root directory level of the distribution. During AppVeyor execution of the *.appveyor.yml* file, when the *.appveyor_bin* directory is found, the code within that directory will supersede and suppress cloning/downloading of the repository helper files.

## Copyright and License

Copyright 2017-2018 by Roy Ivy III. All rights reserved.

Licensed under the MIT License (a copy may be obtained from <https://opensource.org/licenses/mit>).
